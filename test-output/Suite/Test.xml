<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="INLN56603970A" ignored="0" name="Test" tests="3" failures="0" timestamp="03 Mar 2018 14:54:00 GMT" time="0.163" errors="0">
  <testcase name="@BeforeMethod beforeMethod" time="0.088" classname="testCases.Framework_001">
    <failure type="java.lang.ExceptionInInitializerError">
      <![CDATA[java.lang.ExceptionInInitializerErrorat testCases.Framework_001.beforeMethod(Framework_001.java:46)Caused by: java.lang.ClassCastException: org.apache.logging.slf4j.SLF4JLoggerContext cannot be cast to org.apache.logging.log4j.core.LoggerContextat org.apache.log4j.Logger$PrivateManager.getContext(Logger.java:59)at org.apache.log4j.Logger.getLogger(Logger.java:37)at utility.Log.<clinit>(Log.java:6)... 29 more... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="testCases.Framework_001">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.001" classname="testCases.Framework_002">
    <failure type="java.lang.NoClassDefFoundError" message="Could not initialize class utility.Log">
      <![CDATA[java.lang.NoClassDefFoundError: Could not initialize class utility.Logat testCases.Framework_002.beforeMethod(Framework_002.java:32)... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="testCases.Framework_002">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="@BeforeMethod beforeMethod" time="0.0" classname="testCases.Framework_2">
    <failure type="java.lang.NoClassDefFoundError" message="Could not initialize class utility.Log">
      <![CDATA[java.lang.NoClassDefFoundError: Could not initialize class utility.Logat testCases.Framework_2.beforeMethod(Framework_2.java:42)... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase name="@AfterMethod afterMethod" time="0.0" classname="testCases.Framework_2">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase name="main" time="0.0" classname="testCases.Framework_001">
    <skipped/>
  </testcase> <!-- main -->
  <testcase name="f" time="0.0" classname="testCases.Framework_002">
    <skipped/>
  </testcase> <!-- f -->
  <testcase name="main" time="0.0" classname="testCases.Framework_2">
    <skipped/>
  </testcase> <!-- main -->
</testsuite> <!-- Test -->
